import os
from pathlib import Path
import pathlib
import sys


def generate_headers(priv_key_path: Path, pub_key_path: Path, output_dir: Path):
    print("Generating source header from Key files")
    print(f"Private key: {priv_key_path.absolute()}")
    print(f"Public key:  {pub_key_path.absolute()}")
    print(f"Output dir:  {output_dir.absolute()}")

    output_dir = output_dir / Path("keys")

    if not output_dir.exists():
        os.makedirs(output_dir.absolute())

    with open(priv_key_path.absolute(), 'r') as private_key_file:
        with open(output_dir.absolute() / Path("private_key.hpp"), 'w') as priv_output:
            private_key = "".join(private_key_file.read().split())
            # TODO: Process the file to something useful
            priv_output.write(
                '#ifndef LCXX_PRIVATE_KEY_H__\n'
                '#define LCXX_PRIVATE_KEY_H__\n'
                '#endif // LCXX_PRIVATE_KEY_H__\n\n'
                '// This file is automatically generated during build. Do not edit ...\n\n'
                'namespace lcxx::keys {\n\n'
                f'\tconstexpr auto private_key = "{private_key}";\n\n'
                '} // namespace lcxx::keys\n'
            )

    with open(pub_key_path.absolute(), 'r') as public_key_file:
        with open(output_dir.absolute() / Path("public_key.hpp"), 'w') as pub_output:
            pub_key = "".join(public_key_file.read().split())
            # TODO: Process the file to something useful
            pub_output.write(
                '#ifndef LCXX_PUBLIC_KEY_H__\n'
                '#define LCXX_PUBLIC_KEY_H__\n'
                '#endif // LCXX_PUBLIC_KEY_H__\n\n'
                '// This file is automatically generated during build. Do not edit ...\n\n'
                'namespace lcxx::keys {\n\n'
                f'\tconstexpr auto public_key = "{pub_key}";\n\n'
                '} // namespace lcxx::keys\n'
            )


if __name__ == "__main__":
    if len(sys.argv) < 4:
        print(f"Not enough cli arguments provided. Arguements: [{sys.argv}]")
        exit(-1)

    generate_headers(Path(sys.argv[1]), Path(sys.argv[2]), Path(sys.argv[3]))
